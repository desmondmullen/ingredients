{"version":3,"sources":["utils/API.js","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["API","queryUSDA","id","axios","get","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","barcodeChange","alert","document","getElementById","innerText","theQuery","value","theAlerts","toUpperCase","split","then","result","data","length","console","log","foods","food","nutrients","theNutrients","theNutrientList","measures","qty","label","i","name","unit","theName","desc","manu","theIngredients","ing","innerHTML","theAlertHits","indexOf","push","setTimeout","join","toLowerCase","catch","err","granola","bread","soup","cornbread","state","latitude","longitude","react_default","a","createElement","className","defaultValue","onClick","width","Component","App","pages_Home","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f2390fa.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  queryUSDA: function (id) {\n    return axios.get(\"/api/usda/\" + id);\n  }\n};","import React, { Component } from 'react';\nimport API from \"../utils/API\";\n\nclass Home extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            latitude: 0,\n            longitude: 0,\n        };\n    };\n\n    barcodeChange = () => {\n        alert('woo');\n    }\n\n    queryUSDA = () => {\n        document.getElementById('result').innerText = 'searching...';\n        const theQuery = document.getElementById('query').value;\n        const theAlerts = ((document.getElementById('alert').value).toUpperCase()).split(' ');\n        API.queryUSDA(theQuery)\n            .then((result) => {\n                if (result.data.length) {\n                    console.log('no result');\n                    document.getElementById('result').innerText = 'no result';\n                } else {\n                    console.log(result.data.foods[ 0 ].food.nutrients);\n                    const theNutrients = result.data.foods[ 0 ].food.nutrients;\n                    let theNutrientList = '<strong>Per ' + theNutrients[ 0 ].measures[ 0 ].qty + ' ' + theNutrients[ 0 ].measures[ 0 ].label + '</strong><br />';\n                    for (let i = 0; i < theNutrients.length; i++) {\n                        theNutrientList += theNutrients[ i ].name + ' ' + theNutrients[ i ].value + theNutrients[ i ].unit + '<br />';\n                    }\n                    const theName = result.data.foods[ 0 ].food.desc.name + ' ' + result.data.foods[ 0 ].food.desc.manu;\n                    const theIngredients = result.data.foods[ 0 ].food.ing.desc;\n                    document.getElementById('result').innerHTML = '<strong>' + theName + '</strong><br />' + theIngredients + '<br /><br />' + theNutrientList;\n                    let theAlertHits = [];\n                    for (let i = 0; i < theIngredients.length; i++) {\n                        if (theIngredients.indexOf(theAlerts[ i ]) > 0) {\n                            theAlertHits.push(theAlerts[ i ]);\n                        }\n                    }\n                    if (theAlertHits.length > 0) {\n                        setTimeout(function () {\n                            alert('This product contains ' + theAlertHits.join(', ').toLowerCase());\n                        }, 100);\n                    };\n                }\n                return false;\n            })\n            .catch(err => console.log(err));\n    };\n\n    granola = () => {\n        document.getElementById('query').value = '021908498263';\n        this.queryUSDA();\n    }\n\n    bread = () => {\n        document.getElementById('query').value = '073410013755';\n        this.queryUSDA();\n    }\n\n    soup = () => {\n        document.getElementById('query').value = '00290906';\n        this.queryUSDA();\n    }\n\n    cornbread = () => {\n        document.getElementById('query').value = '072486010040';\n        this.queryUSDA();\n    }\n\n    render () {\n        return (\n            <div>\n                <section id=\"container\" className=\"container\">\n                    {/* <div className=\"controls\">\n                        <fieldset className=\"input-group\"> */}\n                    {/* <button className=\"stop\">Stop</button> */ }\n                    {/* </fieldset>\n                    </div> */}\n                    <div id=\"result_strip\">\n                        <ul className=\"thumbnails\"></ul>\n                        <ul className=\"collector\"></ul>\n                    </div>\n                    <div id=\"interactive\" className=\"viewport\"></div>\n                </section>\n                <strong>Barcode:</strong> <input id='query' defaultValue='00014885'></input>\n                <br />\n                <strong>Watch for:</strong> <input id='alert' defaultValue='onion'></input>\n                <br />\n                <button onClick={ this.queryUSDA }>Search</button>\n                <br />\n                <br />\n                <div id='result' width='100%'></div>\n                <br />\n                <br />\n                <strong>Examples:</strong>\n                <br />\n                <button onClick={ this.granola }>Granola</button>\n                <br />\n                <button onClick={ this.bread }>Bread</button>\n                <br />\n                <button onClick={ this.soup }>Soup</button>\n                <br />\n                <button onClick={ this.cornbread }>Cornbread</button>\n            </div>\n        );\n    }\n};\n\nexport default Home;","import React from 'react';\nimport './index.css';\nimport Home from './pages/Home';\n\n\nfunction App () {\n  return (\n    <Home></Home>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}