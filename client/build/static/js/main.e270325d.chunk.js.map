{"version":3,"sources":["utils/API.js","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["API","queryUSDA","id","axios","get","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","document","getElementById","innerText","theQuery","value","then","result","data","length","console","log","theIngredients","foods","food","ing","desc","indexOf","alert","catch","err","state","latitude","longitude","react_default","a","createElement","defaultValue","type","accept","capture","onClick","Component","App","pages_Home","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAEeA,EAAA,CACbC,UAAW,SAAUC,GACnB,OAAOC,IAAMC,IAAI,aAAeF,KCyCrBG,cAzCX,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVL,UAAY,WACRa,SAASC,eAAe,UAAUC,UAAY,eAC9C,IAAMC,EAAWH,SAASC,eAAe,SAASG,MAClDlB,EAAIC,UAAUgB,GACTE,KAAK,SAACC,GACH,GAAIA,EAAOC,KAAKC,OACZC,QAAQC,IAAI,aACZV,SAASC,eAAe,UAAUC,UAAY,gBAC3C,CACH,IAAMS,EAAiBL,EAAOC,KAAKK,MAAO,GAAIC,KAAKC,IAAIC,KACnDJ,EAAeK,QAAQ,SAAW,GAAKC,MAAM,UACjDjB,SAASC,eAAe,UAAUC,UAAYS,EAElD,OAAO,IAEVO,MAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,MArB9B1B,EAAK2B,MAAQ,CACTC,SAAU,EACVC,UAAW,GAJC7B,wEA2BhB,OACI8B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOrC,GAAG,QAAQsC,aAAa,aAC/BH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,OAAO,UAAUC,QAAQ,WAC5CN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQK,QAAUlC,KAAKT,WAAvB,UACAoC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKrC,GAAG,mBApCL2C,aCQJC,MANf,WACE,OACET,EAAAC,EAAAC,cAACQ,EAAD,eCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACLjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAD,OAEJ1C,SAASC,eAAe,SDsHtB,kBAAmB0C,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.e270325d.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  queryUSDA: function (id) {\n    return axios.get(\"/api/usda/\" + id);\n  }\n};","import React, { Component } from 'react';\nimport API from \"../utils/API\";\n\nclass Home extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            latitude: 0,\n            longitude: 0,\n        };\n    };\n\n    queryUSDA = () => {\n        document.getElementById('result').innerText = 'searching...'\n        const theQuery = document.getElementById('query').value;\n        API.queryUSDA(theQuery)\n            .then((result) => {\n                if (result.data.length) {\n                    console.log('no result');\n                    document.getElementById('result').innerText = 'no result'\n                } else {\n                    const theIngredients = result.data.foods[ 0 ].food.ing.desc\n                    if (theIngredients.indexOf('SUGAR') > 0) { alert('sugar!'); };\n                    document.getElementById('result').innerText = theIngredients\n                }\n                return false;\n            })\n            .catch(err => console.log(err));\n    };\n\n    render () {\n        return (\n            <div>\n                <input id='query' defaultValue='00014885'></input>\n                <br />\n                <input type=\"file\" accept=\"image/*\" capture=\"camera\" />\n                <br />\n                <button onClick={ this.queryUSDA }>button</button>\n                <br />\n                <div id='result'></div>\n            </div>\n        );\n    }\n};\n\nexport default Home;","import React from 'react';\nimport './index.css';\nimport Home from './pages/Home';\n\n\nfunction App () {\n  return (\n    <Home></Home>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}